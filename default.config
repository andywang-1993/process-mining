server {
        listen 80 ;
        server_name _; #for production environment replace _ with the name of your host

        error_page 301 302 @30x; # keep original HTTP status code w/o `=`
        location @30x {
         default_type ""; # will remove Content-Type completely
         # `300` is a filler: client will get the original HTTP status code
         return 300;
        }

        server_tokens off;
        return 301 https://$host$request_uri;
}

# dDOS slow-body mitigate attack
#limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;
#limit_conn_zone $binary_remote_addr zone=addr:10m;

server {
        listen   443 ssl;
        server_name _; #for production environment replace _ with the name of your host
        keepalive_timeout   70;
        server_tokens off;

        ssl on;
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

                ssl_session_timeout 1d;
                ssl_session_cache shared:SSL:50m;
                ssl_session_tickets off;


                # modern configuration. tweak to your needs.
                ssl_protocols TLSv1.2;
                ssl_prefer_server_ciphers on;

                # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
                #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
                add_header X-Forwarded-Proto "https";
                add_header X-Frame-Options "DENY";

        error_page 301 302 @30x;
        location @30x {
          default_type ""; # will remove Content-Type completely
          return 300;
        error_page 403 404 405 500 501 502 503 504 /error.html;
        location = /error.html {
                root /usr/share/nginx/html;
                internal;
        }

                # dDOS slow-body mitigate attack
                #client_body_timeout 5s;
                #client_header_timeout 5s;

                #location /signin {
                #       limit_req zone=one;
                #       limit_conn addr 10;
                #    proxy_pass              http://localhost:8080;
        #    proxy_set_header        X-Real-IP $remote_addr;
        #    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        #    proxy_set_header        Host $http_host;
                #}

        location / {
                proxy_pass              http://localhost:8080;
                proxy_set_header        X-Real-IP $remote_addr;
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header        Host $http_host;
                client_max_body_size    200M;
                proxy_set_header        X-Forwarded-Proto $scheme;
                proxy_set_header        Host $host:$server_port;

                proxy_hide_header Strict-Transport-Security;
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
                add_header X-Frame-Options "DENY";
                proxy_hide_header X-Content-Type-Options;
                add_header X-Content-Type-Options "nosniff";
                proxy_hide_header X-XSS-Protection;
                add_header X-XSS-Protection "1; mode=block";
                proxy_hide_header Content-Security-Policy;
                add_header Content-Security-Policy "object-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval';  frame-ancestors 'none' ";
        }
}


# Prevent Host Header Injection

# server {
#     listen 80 default_server;
#     server_name _;
#     access_log  /var/log/nginx/80default.access.log;
#     return 444;
# }

# server {
#     listen 443 ssl default_server;
#     server_name _;
#     access_log  /var/log/nginx/ssldefault.access.log;
#     ssl_certificate /etc/nginx/ssl/tls.pem;
#     ssl_certificate_key /etc/nginx/ssl/tls.key;
#     return 444;
# }
